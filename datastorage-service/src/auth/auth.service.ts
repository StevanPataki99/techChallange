import {
  BadRequestException,
  CACHE_MANAGER,
  Inject,
  Injectable,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { JwtService } from '@nestjs/jwt';
import { User } from '@prisma/client';
import * as CacheManager from 'cache-manager';
import { v4 as uuidv4 } from 'uuid';
import * as bcrypt from 'bcrypt';

import { UserRepository } from 'src/user/user.repository';
import { UserRegisterInput } from './dto/user-register.input';
import { UserLoginInput } from './dto/user-login.input';

@Injectable()
export class AuthService {
  constructor(
    @Inject(CACHE_MANAGER) private cacheManager: CacheManager.Cache,
    private userRepository: UserRepository,
    private jwtService: JwtService,
    private configService: ConfigService,
  ) {}

  async register(userRegisterData: UserRegisterInput): Promise<User> {
    userRegisterData.password = await bcrypt.hash(
      userRegisterData.password,
      10,
    );
    return this.userRepository.createUser(userRegisterData);
  }

  async login(userLoginData: UserLoginInput) {
    const user = await this.validateUser(userLoginData);

    if (!user) {
      throw new BadRequestException();
    }

    return this.generateJwtToken(user);
  }

  async validateUser(userLoginData: UserLoginInput) {
    const user = await this.userRepository.user({
      email: userLoginData.email,
    });
    const match = await bcrypt.compare(userLoginData.password, user.password);

    if (user && match) {
      return user;
    }
    return undefined;
  }

  async generateJwtToken(user: User) {
    const expiresIn = this.configService.get<number>('auth.accessExpiresIn');

    const jwtPayload = { sub: user.id, email: user.email };
    const jwtToken = this.jwtService.sign(jwtPayload, { expiresIn });

    return jwtToken;
  }

  async generateRefreshToken(userId: string, email: string) {
    const expiresIn = this.configService.get<number>('auth.refreshExpiresIn');
    const nonce = uuidv4();

    // Store the token in redis so we can verify it was generated by us
    await this.cacheManager.set(`refresh_${nonce}`, userId, {
      ttl: expiresIn + 1,
    });

    return this.jwtService.sign(
      { sub: userId, email, nonce },
      {
        expiresIn,
      },
    );
  }

  deleteRefreshToken(nonce: string) {
    return this.cacheManager.del(`refresh_${nonce}`);
  }
}
